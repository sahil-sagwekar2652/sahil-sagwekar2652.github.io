<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sahil's Blog - devops</title><link href="https://sahil-sagwekar2652.github.io/" rel="alternate"></link><link href="https://sahil-sagwekar2652.github.io/feeds/devops.atom.xml" rel="self"></link><id>https://sahil-sagwekar2652.github.io/</id><updated>2024-01-24T16:08:00+05:30</updated><entry><title>How to deploy a Flask app to production</title><link href="https://sahil-sagwekar2652.github.io/how-to-deploy-a-flask-app-to-production.html" rel="alternate"></link><published>2024-01-24T16:08:00+05:30</published><updated>2024-01-24T16:08:00+05:30</updated><author><name>Sahil Sagwekar</name></author><id>tag:sahil-sagwekar2652.github.io,2024-01-24:/how-to-deploy-a-flask-app-to-production.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/sahil-sagwekar2652/Personal-blog-website"&gt;Link to the GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="heading-why-use-docker"&gt;Why use Docker?&lt;/h1&gt;
&lt;h4 id="heading-tldr-agility-portability-and-isolation"&gt;TLDR - Agility, Portability and Isolation&lt;/h4&gt;
&lt;p&gt;&lt;img alt class="image--center mx-auto" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1703792704561/f1a4cdf8-1f5d-4fba-a2e0-26403830724f.png?auto=compress,format&amp;amp;format=webp"&gt;&lt;/p&gt;
&lt;p&gt;You should use a technology only if it fits your use case and not because everybody is talking about it on Twitter. The main purpose of using Docker is efficiency. It would suck if one computer could …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/sahil-sagwekar2652/Personal-blog-website"&gt;Link to the GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="heading-why-use-docker"&gt;Why use Docker?&lt;/h1&gt;
&lt;h4 id="heading-tldr-agility-portability-and-isolation"&gt;TLDR - Agility, Portability and Isolation&lt;/h4&gt;
&lt;p&gt;&lt;img alt class="image--center mx-auto" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1703792704561/f1a4cdf8-1f5d-4fba-a2e0-26403830724f.png?auto=compress,format&amp;amp;format=webp"&gt;&lt;/p&gt;
&lt;p&gt;You should use a technology only if it fits your use case and not because everybody is talking about it on Twitter. The main purpose of using Docker is efficiency. It would suck if one computer could do only one thing. Although we can run multiple programs simultaneously, we need to ensure that they don't interfere with each other i.e. we need isolation. It also might happen that different software requires different versions of the same dependency. So people invented Virtual Machines! But virtual machines set up a whole new virtual computer, ensuring complete isolation but introducing significant overhead too. Containers on the other hand share the kernel within the host OS.&lt;/p&gt;
&lt;h1 id="heading-lets-build-the-stack"&gt;Let's build the stack&lt;/h1&gt;
&lt;p&gt;&lt;img alt class="image--center mx-auto" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1705737568119/dd6d3e75-e5ae-49b2-8961-d8e8a094159f.png"&gt;&lt;/p&gt;
&lt;p&gt;We will be using 3 containers in our stack. Nginx as reverse-proxy, the flask app in the second container and the database running in the third container.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id="heading-the-flask-container"&gt;The Flask container&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;python:3.11.6-slim-bullseye&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;~/flask_blog&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;curl

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--bind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.0.0:5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wsgi:app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;FROM&lt;/code&gt;&lt;em&gt;directive&lt;/em&gt; (that's what they are called) specifies the base image that we will be using. We will use the &lt;code&gt;python 3.11&lt;/code&gt; image which comes with python 3.11 pre-installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;WORKDIR&lt;/code&gt; directive creates and specifies the working directory for all the next commands in the Dockerfile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; directive copies the contents of the current directory on the host OS and copies it inside our working directory i.e. &lt;code&gt;~/flask_blog&lt;/code&gt; inside the container.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current directory looks like this -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── Dockerfile
├── forms.py
├── main.py
├── requirements.txt
├── static
├── templates
└── wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;RUN&lt;/code&gt; directives run commands which commit their changes onto the container image i.e. installing the dependencies updating the apt repository and installing curl.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; directive is the command the container executes by default when you launch the built image, the command is &lt;code&gt;gunicorn --bind 0.0.0.0:5000 wsgi:app&lt;/code&gt; .
   We'll talk more about &lt;strong&gt;gunicorn&lt;/strong&gt; and &lt;strong&gt;wsgi&lt;/strong&gt; later in the article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id="heading-docker-compose-file"&gt;Docker compose file&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;flask_blog&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx:stable&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;flask_blog&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80:80&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./nginx/:/etc/nginx/conf.d/:ro&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres:12-bullseye&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;env_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.env&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres_data:/var/lib/postgresql/data/&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;healthcheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CMD-SHELL&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pg_isready&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-d&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;$${POSTGRES_DB}&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-U&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;$${POSTGRES_USER}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1s&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3s&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;flask_blog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sahilsagwekar2652/personal-blog-website:master&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;service_started&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;env_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.env&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;db&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;db&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;healthcheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CMD&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--fail&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:5000&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;30s&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10s&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on-failure&lt;/span&gt;

&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;postgres_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;db_volume&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I won't be going through every section of the docker-compose file. If you would like to understand what's happening in detail, go through the official &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/"&gt;docker compose reference&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id="heading-persisting-data"&gt;Persisting data&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we start a container ad-hoc, it creates an untagged volume. In our context, we need to persist the data from the database container. So even if we bring the stack down using &lt;code&gt;docker compose down&lt;/code&gt; , make some changes and then bring the stack up once again using &lt;code&gt;docker compose up&lt;/code&gt; no data would be lost.&lt;/p&gt;
&lt;p&gt;The key takeaway from the docker-compose file is the &lt;code&gt;volumes&lt;/code&gt; section at the end. Here we define a volume &lt;code&gt;postgres_data&lt;/code&gt; . This volume is mapped to &lt;code&gt;/var/lib/postgresql/data&lt;/code&gt; inside the &lt;code&gt;db&lt;/code&gt; container.&lt;/p&gt;
&lt;h1 id="heading-about-wsgi"&gt;About WSGI&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;WSGI&lt;/strong&gt; stands for &lt;strong&gt;Web Server Gateway Interface.&lt;/strong&gt; WSGI is nothing but a protocol to communicate between the HTTP server and the python backend application. Think of it as a middleman between the HTTP server and the python backend. The WSGI protocol is described in the PEP 3333 standard.&lt;/p&gt;
&lt;p&gt;One of the reasons why WSGI exists is to decouple the application from the webserver and to make it more platform agnostic. If you have worked with Flask or Django you might recall that both frameworks come packaged with a built-in HTTP server. However when we run these servers the output strictly warns us against using these built-in servers in production. The reason is that these servers miss quite a few features that other web servers provide, one of which is support for TLS certificates (HTTPS).&lt;/p&gt;
&lt;p&gt;For production, there are many WSGI servers to choose from. In this project we will be using Gunicorn. You could tell that from the last line in the Flask blog Dockerfile.&lt;/p&gt;
&lt;p&gt;More about WSGI in this Reddit post - &lt;a href="https://www.reddit.com/r/django/comments/skge94/uwsgi_wsgi_gunicorn_apache_nginx_could_someone/"&gt;https://www.reddit.com/r/django/comments/skge94/uwsgi_wsgi_gunicorn_apache_nginx_could_someone/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id="heading-setting-up-nginx-webserver"&gt;Setting up NGINX webserver&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that we the flask container ready, we need to set up a webserver container to handle all the HTTP requests. For simplicity, a reverse-proxy also does the same thing but can do a lot more. NGINX is also used a reverse-proxy server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./nginx/:/etc/nginx/conf.d/:ro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the volumes section inside the &lt;code&gt;nginx&lt;/code&gt; service in the docker-compose file, we have a volume mapping from the &lt;code&gt;nginx&lt;/code&gt; directory in the host OS to the &lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt; directory in the container. The &lt;code&gt;ro&lt;/code&gt; specifies the read-only nature of the connection.&lt;/p&gt;
&lt;p&gt;The contents of the &lt;code&gt;nginx&lt;/code&gt; directory should look like this -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx/
└── nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configuring nginx is relatively simple for our context. Following is the &lt;code&gt;nginx.conf&lt;/code&gt; that we will be using -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;upstream flask_blog {
    server flask_blog:5000;
}

server {
    listen 80;

    location / {
        proxy_pass http://flask_blog;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Source - &lt;a href="https://testdriven.io/blog/dockerizing-flask-with-postgres-gunicorn-and-nginx/#gunicorn"&gt;https://testdriven.io/blog/dockerizing-flask-with-postgres-gunicorn-and-nginx/#gunicorn&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="heading-we-are-done"&gt;We are DONE!&lt;/h2&gt;
&lt;p&gt;Our blog is now ready to deploy! Run it on your local machine or on a Cloud instance.&lt;/p&gt;
&lt;h4 id="heading-references"&gt;References -&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://chat.openai.com/share/27e0b18d-cc23-4925-acc5-7966916d04e4"&gt;https://chat.openai.com/share/27e0b18d-cc23-4925-acc5-7966916d04e4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/3.0.x/deploying/"&gt;https://flask.palletsprojects.com/en/3.0.x/deploying/&lt;/a&gt;&lt;/p&gt;</content><category term="devops"></category></entry><entry><title>How to solve "failed to mount: no such device" error with the docker daemon</title><link href="https://sahil-sagwekar2652.github.io/how-to-solve-failed-to-mount-no-such-device-error-with-the-docker-daemon.html" rel="alternate"></link><published>2023-12-28T20:24:00+05:30</published><updated>2023-12-28T20:24:00+05:30</updated><author><name>Sahil Sagwekar</name></author><id>tag:sahil-sagwekar2652.github.io,2023-12-28:/how-to-solve-failed-to-mount-no-such-device-error-with-the-docker-daemon.html</id><summary type="html">&lt;h1 id="heading-solution"&gt;Solution&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The solution to this problem could be as simple as rebooting your system.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The problem is caused mostly when the kernel updates itself during a system update. In my case, I was on Arch Linux when I ran the command &lt;code&gt;sudo pacman -Syu&lt;/code&gt; to start a system update.&lt;/p&gt;
&lt;p&gt;Upon …&lt;/p&gt;</summary><content type="html">&lt;h1 id="heading-solution"&gt;Solution&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The solution to this problem could be as simple as rebooting your system.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The problem is caused mostly when the kernel updates itself during a system update. In my case, I was on Arch Linux when I ran the command &lt;code&gt;sudo pacman -Syu&lt;/code&gt; to start a system update.&lt;/p&gt;
&lt;p&gt;Upon completing the update, an error came up on my screen when I tried to run &lt;code&gt;docker&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;I used the following command to check the docker daemon logs - (Only works for systemd-based distros)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;journalctl&lt;span class="w"&gt; &lt;/span&gt;-xeu&lt;span class="w"&gt; &lt;/span&gt;docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was the &lt;strong&gt;output&lt;/strong&gt; -&lt;/p&gt;
&lt;p&gt;&lt;img alt class="image--center mx-auto" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1703598770959/abade4a3-c9dc-419d-b89b-b2289e59949c.png"&gt;&lt;/p&gt;
&lt;p&gt;The first error message says - &lt;code&gt;msg="failed to mount overlay: no such device" storage-driver=overlay2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let us try to understand what &lt;code&gt;overlay&lt;/code&gt; is and what are Layers in the context of Docker containers.&lt;/p&gt;
&lt;h1 id="heading-docker-layers"&gt;Docker Layers&lt;/h1&gt;
&lt;p&gt;Containers were meant to be a better and more efficient alternative to VMs, the preferred solution for running applications in isolation. Individual VMs do not share any resources between them. Each VM has its own full-fledged operating system which creates its own file system. Even two VMs of the same operating system share nothing with each other. While this kind of setup also has its use cases, it's a waste of resources in our context. Containers solve this problem by sharing resources.&lt;/p&gt;
&lt;p&gt;What is an image? It's a collection of filesystem layers and metadata. These layers are together run by Docker as a container. Containers are a running instance of an image. We can run multiple containers of the same image.&lt;/p&gt;
&lt;p&gt;Docker implements a &lt;strong&gt;copy-on-write&lt;/strong&gt; mechanism. Multiple containers share the same base system of the base image. The base directory of the image is read-only and all the changes are recorded in a different directory which is then layered on top of the base directory. The Overlay driver is used by Docker to implement it's layered file system. Layers can be shared across multiple running containers.&lt;/p&gt;
&lt;p&gt;&lt;img alt class="image--center mx-auto" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1703792704561/f1a4cdf8-1f5d-4fba-a2e0-26403830724f.png"&gt;&lt;/p&gt;
&lt;h4 id="heading-references"&gt;References :&lt;/h4&gt;
&lt;p&gt;Learn more about docker layers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/"&gt;https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.petermcconnell.com/posts/docker-overlayfs/"&gt;https://www.petermcconnell.com/posts/docker-overlayfs/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://youtu.be/FCk5ylLjnxw"&gt;https://youtu.be/FCk5ylLjnxw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="devops"></category></entry></feed>